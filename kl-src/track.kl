
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun shen-f_error (V1079)
 (do (intoutput "partial function ~A;~%" (@p V1079 ()))
  (do
   (if
    (and (not (shen-tracked? V1079))
     (y-or-n? (intmake-string "track ~A? " (@p V1079 ()))))
    (shen-track-function (ps V1079)) shen-ok)
   (simple-error "aborted"))))

(defun shen-tracked? (V1080) (element? V1080 (value shen-*tracking*)))

(defun track (V1081) (let Source (ps V1081) (shen-track-function Source)))

(defun shen-track-function (V1082)
 (cond
  ((and (cons? V1082)
    (and (= defun (hd V1082))
     (and (cons? (tl V1082))
      (and (cons? (tl (tl V1082)))
       (and (cons? (tl (tl (tl V1082))))
        (= () (tl (tl (tl (tl V1082))))))))))
   (let KL
    (cons defun
     (cons (hd (tl V1082))
      (cons (hd (tl (tl V1082)))
       (cons
        (shen-insert-tracking-code (hd (tl V1082)) (hd (tl (tl V1082)))
         (hd (tl (tl (tl V1082)))))
        ()))))
    (let Ob (eval KL)
     (let Tr (set shen-*tracking* (cons Ob (value shen-*tracking*))) Ob))))
  (true (shen-sys-error shen-track-function))))

(defun shen-insert-tracking-code (V1083 V1084 V1085)
 (cons do
  (cons
   (cons set
    (cons shen-*call*
     (cons (cons + (cons (cons value (cons shen-*call* ())) (cons 1 ())))
      ())))
   (cons
    (cons do
     (cons
      (cons shen-input-track
       (cons (cons value (cons shen-*call* ()))
        (cons V1083 (cons (shen-cons_form V1084) ()))))
      (cons
       (cons do
        (cons (cons shen-terpri-or-read-char ())
         (cons
          (cons let
           (cons Result
            (cons V1085
             (cons
              (cons do
               (cons
                (cons shen-output-track
                 (cons (cons value (cons shen-*call* ()))
                  (cons V1083 (cons Result ()))))
                (cons
                 (cons do
                  (cons
                   (cons set
                    (cons shen-*call*
                     (cons
                      (cons -
                       (cons (cons value (cons shen-*call* ())) (cons 1 ())))
                      ())))
                   (cons
                    (cons do
                     (cons (cons shen-terpri-or-read-char ())
                      (cons Result ())))
                    ())))
                 ())))
              ()))))
          ())))
       ())))
    ()))))

(set shen-*step* false)

(defun step (V1090)
 (cond ((= + V1090) (set shen-*step* true))
  ((= - V1090) (set shen-*step* false))
  (true (interror "step expects a + or a -.~%" ()))))

(defun spy (V1095)
 (cond ((= + V1095) (set shen-*spy* true))
  ((= - V1095) (set shen-*spy* false))
  (true (interror "spy expects a + or a -.~%" ()))))

(defun shen-terpri-or-read-char ()
 (if (value shen-*step*) (shen-check-byte (read-byte (value *stinput*)))
  (nl 1)))

(defun shen-check-byte (V1100)
 (cond ((= V1100 (shen-hat)) (interror "aborted" ())) (true true)))

(defun shen-input-track (V1101 V1102 V1103)
 (do
  (intoutput "~%~A<~A> Inputs to ~A ~%~A"
   (@p (shen-spaces V1101)
    (@p V1101 (@p V1102 (@p (shen-spaces V1101) (@p V1103 ()))))))
  (shen-recursively-print V1103)))

(defun shen-recursively-print (V1104)
 (cond ((= () V1104) (intoutput " ==>" ()))
  ((cons? V1104)
   (do (print (hd V1104))
    (do (intoutput ", " ()) (shen-recursively-print (tl V1104)))))
  (true (shen-sys-error shen-recursively-print))))

(defun shen-spaces (V1105)
 (cond ((= 0 V1105) "") (true (cn " " (shen-spaces (- V1105 1))))))

(defun shen-output-track (V1106 V1107 V1108)
 (intoutput "~%~A<~A> Output from ~A ~%~A==> ~S"
  (@p (shen-spaces V1106)
   (@p V1106 (@p V1107 (@p (shen-spaces V1106) (@p V1108 ())))))))

(defun untrack (V1109) (eval (ps V1109)))

(defun profile (V1110) (shen-profile-help (ps V1110)))

(defun shen-profile-help (V1115)
 (cond
  ((and (cons? V1115)
    (and (= defun (hd V1115))
     (and (cons? (tl V1115))
      (and (cons? (tl (tl V1115)))
       (and (cons? (tl (tl (tl V1115))))
        (= () (tl (tl (tl (tl V1115))))))))))
   (let G (gensym shen-f)
    (let Profile
     (cons defun
      (cons (hd (tl V1115))
       (cons (hd (tl (tl V1115)))
        (cons
         (shen-profile-func (hd (tl V1115)) (hd (tl (tl V1115)))
          (cons G (hd (tl (tl V1115)))))
         ()))))
     (let Def
      (cons defun
       (cons G
        (cons (hd (tl (tl V1115)))
         (cons (subst G (hd (tl V1115)) (hd (tl (tl (tl V1115))))) ()))))
      (let CompileProfile (eval-without-macros Profile)
       (let CompileG (eval-without-macros Def) (hd (tl V1115))))))))
  (true (interror "Cannot profile.~%" ()))))

(defun unprofile (V1116) (untrack V1116))

(defun shen-profile-func (V1117 V1118 V1119)
 (cons let
  (cons Start
   (cons (cons get-time (cons run ()))
    (cons
     (cons let
      (cons Result
       (cons V1119
        (cons
         (cons let
          (cons Finish
           (cons
            (cons - (cons (cons get-time (cons run ())) (cons Start ())))
            (cons
             (cons let
              (cons Record
               (cons
                (cons shen-put-profile
                 (cons V1117
                  (cons
                   (cons +
                    (cons (cons shen-get-profile (cons V1117 ()))
                     (cons Finish ())))
                   ())))
                (cons Result ()))))
             ()))))
         ()))))
     ())))))

(defun profile-results (V1120)
 (let Results (shen-get-profile V1120)
  (let Initialise (shen-put-profile V1120 0) (@p V1120 Results))))

(defun shen-get-profile (V1121)
 (trap-error (get V1121 profile (value shen-*property-vector*)) (lambda E 0)))

(defun shen-put-profile (V1122 V1123)
 (put V1122 profile V1123 (value shen-*property-vector*)))

