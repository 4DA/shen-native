
"                                                   The License
 
 The user is free to produce commercial applications with the software, to distribute these applications in source or binary  form, and to charge monies for them as he sees fit and in concordance with the laws of the land subject to the following  license.
 
 1. The license applies to all the software and all derived software and must appear on such.
 2. It is illegal to distribute the software without this license attached to it and use of the software implies agreement 
    with the license as such. It is illegal for anyone who is not the copyright holder to tamper with or change the license.
 3. Neither the names of Lambda Associates or the copyright holder may be used to endorse or promote products built using
     the software without specific prior written permission from the copyright holder.
 4. That possession of this license does not confer on the copyright holder any special contractual obligation towards the    user. That in no event shall the copyright holder be liable for any direct, indirect, incidental, special, exemplary or   consequential damages (including but not limited to procurement of substitute goods or services, loss of use, data, or    profits; or business interruption), however caused and on any theory of liability, whether in contract, strict liability   or tort (including negligence) arising in any way out of the use of the software, even if advised of the possibility of   such damage. 
5. It is permitted for the user to change the software, for the purpose of improving performance, correcting an error, or    porting to a new platform, and distribute the modified version of Shen (hereafter the modified version) provided the     resulting program conforms in all respects to the Shen standard and is issued under that title. The user must make it clear   with his distribution that he/she is the author of the changes and what these changes are and why. 
6. Derived versions of this software in whatever form are subject to the same restrictions. In particular it is not          permitted to make derived copies of this software which do not conform to the Shen standard or appear under a different title.
7. It is permitted to distribute versions of Shen which incorporate libraries, graphics or other facilities which are not    part of the Shen standard.

For an explication of this license see http://www.lambdassociates.org/News/june11/license.htm which explains this license in full."

(defun shen-datatype-error (V1502)
 (interror "datatype syntax error here:~%~% ~A~%"
  (@p (shen-next-50 50 V1502) ())))

(defun shen-<datatype-rules> (V1503)
 (let Result
  (let Parse_<datatype-rule> (shen-<datatype-rule> V1503)
   (if (not (= (fail) Parse_<datatype-rule>))
    (let Parse_<datatype-rules> (shen-<datatype-rules> Parse_<datatype-rule>)
     (if (not (= (fail) Parse_<datatype-rules>))
      (shen-reassemble (fst Parse_<datatype-rules>)
       (cons (snd Parse_<datatype-rule>) (snd Parse_<datatype-rules>)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V1503)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<datatype-rule> (V1504)
 (let Result
  (let Parse_<side-conditions> (shen-<side-conditions> V1504)
   (if (not (= (fail) Parse_<side-conditions>))
    (let Parse_<premises> (shen-<premises> Parse_<side-conditions>)
     (if (not (= (fail) Parse_<premises>))
      (let Parse_<singleunderline> (shen-<singleunderline> Parse_<premises>)
       (if (not (= (fail) Parse_<singleunderline>))
        (let Parse_<conclusion> (shen-<conclusion> Parse_<singleunderline>)
         (if (not (= (fail) Parse_<conclusion>))
          (shen-reassemble (fst Parse_<conclusion>)
           (@p shen-single
            (cons (snd Parse_<side-conditions>)
             (cons (snd Parse_<premises>)
              (cons (snd Parse_<conclusion>) ())))))
          (fail)))
        (fail)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<side-conditions> (shen-<side-conditions> V1504)
     (if (not (= (fail) Parse_<side-conditions>))
      (let Parse_<premises> (shen-<premises> Parse_<side-conditions>)
       (if (not (= (fail) Parse_<premises>))
        (let Parse_<doubleunderline> (shen-<doubleunderline> Parse_<premises>)
         (if (not (= (fail) Parse_<doubleunderline>))
          (let Parse_<conclusion> (shen-<conclusion> Parse_<doubleunderline>)
           (if (not (= (fail) Parse_<conclusion>))
            (shen-reassemble (fst Parse_<conclusion>)
             (@p shen-double
              (cons (snd Parse_<side-conditions>)
               (cons (snd Parse_<premises>)
                (cons (snd Parse_<conclusion>) ())))))
            (fail)))
          (fail)))
        (fail)))
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<side-conditions> (V1505)
 (let Result
  (let Parse_<side-condition> (shen-<side-condition> V1505)
   (if (not (= (fail) Parse_<side-condition>))
    (let Parse_<side-conditions>
     (shen-<side-conditions> Parse_<side-condition>)
     (if (not (= (fail) Parse_<side-conditions>))
      (shen-reassemble (fst Parse_<side-conditions>)
       (cons (snd Parse_<side-condition>) (snd Parse_<side-conditions>)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V1505)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<side-condition> (V1506)
 (let Result
  (if (and (cons? (fst V1506)) (= if (hd (fst V1506))))
   (let Parse_<expr>
    (shen-<expr> (shen-reassemble (tl (fst V1506)) (snd V1506)))
    (if (not (= (fail) Parse_<expr>))
     (shen-reassemble (fst Parse_<expr>)
      (cons if (cons (snd Parse_<expr>) ())))
     (fail)))
   (fail))
  (if (= Result (fail))
   (let Result
    (if (and (cons? (fst V1506)) (= let (hd (fst V1506))))
     (let Parse_<variable?>
      (shen-<variable?> (shen-reassemble (tl (fst V1506)) (snd V1506)))
      (if (not (= (fail) Parse_<variable?>))
       (let Parse_<expr> (shen-<expr> Parse_<variable?>)
        (if (not (= (fail) Parse_<expr>))
         (shen-reassemble (fst Parse_<expr>)
          (cons let
           (cons (snd Parse_<variable?>) (cons (snd Parse_<expr>) ()))))
         (fail)))
       (fail)))
     (fail))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<variable?> (V1507)
 (let Result
  (if (cons? (fst V1507))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1507)) (snd V1507)))
    (if (not (variable? (hd (fst V1507)))) (fail) (hd (fst V1507))))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<expr> (V1508)
 (let Result
  (if (cons? (fst V1508))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1508)) (snd V1508)))
    (if
     (or (element? (hd (fst V1508)) (cons >> (cons ; ())))
      (or (shen-singleunderline? (hd (fst V1508)))
       (shen-doubleunderline? (hd (fst V1508)))))
     (fail) (shen-remove-bar (hd (fst V1508)))))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-remove-bar (V1509)
 (cond
  ((and (cons? V1509)
    (and (cons? (tl V1509))
     (and (cons? (tl (tl V1509)))
      (and (= () (tl (tl (tl V1509)))) (= (hd (tl V1509)) bar!)))))
   (cons (hd V1509) (hd (tl (tl V1509)))))
  ((cons? V1509)
   (cons (shen-remove-bar (hd V1509)) (shen-remove-bar (tl V1509))))
  (true V1509)))

(defun shen-<premises> (V1510)
 (let Result
  (let Parse_<premise> (shen-<premise> V1510)
   (if (not (= (fail) Parse_<premise>))
    (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<premise>)
     (if (not (= (fail) Parse_<semicolon-symbol>))
      (let Parse_<premises> (shen-<premises> Parse_<semicolon-symbol>)
       (if (not (= (fail) Parse_<premises>))
        (shen-reassemble (fst Parse_<premises>)
         (cons (snd Parse_<premise>) (snd Parse_<premises>)))
        (fail)))
      (fail)))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<e> (<e> V1510)
     (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<semicolon-symbol> (V1511)
 (let Result
  (if (cons? (fst V1511))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1511)) (snd V1511)))
    (if (= (hd (fst V1511)) ;) shen-skip (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<premise> (V1512)
 (let Result
  (if (and (cons? (fst V1512)) (= ! (hd (fst V1512))))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1512)) (snd V1512))) !)
   (fail))
  (if (= Result (fail))
   (let Result
    (let Parse_<formulae> (shen-<formulae> V1512)
     (if (not (= (fail) Parse_<formulae>))
      (if
       (and (cons? (fst Parse_<formulae>))
        (= >> (hd (fst Parse_<formulae>))))
       (let Parse_<formula>
        (shen-<formula>
         (shen-reassemble (tl (fst Parse_<formulae>)) (snd Parse_<formulae>)))
        (if (not (= (fail) Parse_<formula>))
         (shen-reassemble (fst Parse_<formula>)
          (@p (snd Parse_<formulae>) (snd Parse_<formula>)))
         (fail)))
       (fail))
      (fail)))
    (if (= Result (fail))
     (let Result
      (let Parse_<formula> (shen-<formula> V1512)
       (if (not (= (fail) Parse_<formula>))
        (shen-reassemble (fst Parse_<formula>) (@p () (snd Parse_<formula>)))
        (fail)))
      (if (= Result (fail)) (fail) Result))
     Result))
   Result)))

(defun shen-<conclusion> (V1513)
 (let Result
  (let Parse_<formulae> (shen-<formulae> V1513)
   (if (not (= (fail) Parse_<formulae>))
    (if
     (and (cons? (fst Parse_<formulae>)) (= >> (hd (fst Parse_<formulae>))))
     (let Parse_<formula>
      (shen-<formula>
       (shen-reassemble (tl (fst Parse_<formulae>)) (snd Parse_<formulae>)))
      (if (not (= (fail) Parse_<formula>))
       (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<formula>)
        (if (not (= (fail) Parse_<semicolon-symbol>))
         (shen-reassemble (fst Parse_<semicolon-symbol>)
          (@p (snd Parse_<formulae>) (snd Parse_<formula>)))
         (fail)))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<formula> (shen-<formula> V1513)
     (if (not (= (fail) Parse_<formula>))
      (let Parse_<semicolon-symbol> (shen-<semicolon-symbol> Parse_<formula>)
       (if (not (= (fail) Parse_<semicolon-symbol>))
        (shen-reassemble (fst Parse_<semicolon-symbol>)
         (@p () (snd Parse_<formula>)))
        (fail)))
      (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<formulae> (V1514)
 (let Result
  (let Parse_<formula> (shen-<formula> V1514)
   (if (not (= (fail) Parse_<formula>))
    (if
     (and (cons? (fst Parse_<formula>))
      (= shen- (hd (fst Parse_<formula>))))
     (let Parse_<formulae>
      (shen-<formulae>
       (shen-reassemble (tl (fst Parse_<formula>)) (snd Parse_<formula>)))
      (if (not (= (fail) Parse_<formulae>))
       (shen-reassemble (fst Parse_<formulae>)
        (cons (snd Parse_<formula>) (snd Parse_<formulae>)))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<formula> (shen-<formula> V1514)
     (if (not (= (fail) Parse_<formula>))
      (shen-reassemble (fst Parse_<formula>) (cons (snd Parse_<formula>) ()))
      (fail)))
    (if (= Result (fail))
     (let Result
      (let Parse_<e> (<e> V1514)
       (if (not (= (fail) Parse_<e>)) (shen-reassemble (fst Parse_<e>) ())
        (fail)))
      (if (= Result (fail)) (fail) Result))
     Result))
   Result)))

(defun shen-<formula> (V1515)
 (let Result
  (let Parse_<expr> (shen-<expr> V1515)
   (if (not (= (fail) Parse_<expr>))
    (if (and (cons? (fst Parse_<expr>)) (= : (hd (fst Parse_<expr>))))
     (let Parse_<type>
      (shen-<type>
       (shen-reassemble (tl (fst Parse_<expr>)) (snd Parse_<expr>)))
      (if (not (= (fail) Parse_<type>))
       (shen-reassemble (fst Parse_<type>)
        (cons (shen-curry (snd Parse_<expr>))
         (cons : (cons (shen-normalise-type (snd Parse_<type>)) ()))))
       (fail)))
     (fail))
    (fail)))
  (if (= Result (fail))
   (let Result
    (let Parse_<expr> (shen-<expr> V1515)
     (if (not (= (fail) Parse_<expr>))
      (shen-reassemble (fst Parse_<expr>) (snd Parse_<expr>)) (fail)))
    (if (= Result (fail)) (fail) Result))
   Result)))

(defun shen-<colonsymbol> (V1516)
 (let Result
  (if (cons? (fst V1516))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1516)) (snd V1516)))
    (if (= (hd (fst V1516)) ;) (hd (fst V1516)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<type> (V1517)
 (let Result
  (let Parse_<expr> (shen-<expr> V1517)
   (if (not (= (fail) Parse_<expr>))
    (shen-reassemble (fst Parse_<expr>) (shen-curry-type (snd Parse_<expr>)))
    (fail)))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<doubleunderline> (V1518)
 (let Result
  (if (cons? (fst V1518))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1518)) (snd V1518)))
    (if (shen-doubleunderline? (hd (fst V1518))) (hd (fst V1518)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-<singleunderline> (V1519)
 (let Result
  (if (cons? (fst V1519))
   (shen-reassemble (fst (shen-reassemble (tl (fst V1519)) (snd V1519)))
    (if (shen-singleunderline? (hd (fst V1519))) (hd (fst V1519)) (fail)))
   (fail))
  (if (= Result (fail)) (fail) Result)))

(defun shen-singleunderline? (V1520)
 (and (symbol? V1520) (shen-sh? (str V1520))))

(defun shen-sh? (V1521)
 (cond ((= "_" V1521) true)
  (true (and (= (pos V1521 0) "_") (shen-sh? (tlstr V1521))))))

(defun shen-doubleunderline? (V1522)
 (and (symbol? V1522) (shen-dh? (str V1522))))

(defun shen-dh? (V1523)
 (cond ((= "=" V1523) true)
  (true (and (= (pos V1523 0) "=") (shen-dh? (tlstr V1523))))))

(defun shen-process-datatype (V1524 V1525)
 (shen-remember-datatype
  (shen-s-prolog (shen-rules->horn-clauses V1524 V1525))))

(defun shen-remember-datatype (V1530)
 (cond
  ((cons? V1530)
   (do (set shen-*datatypes* (adjoin (hd V1530) (value shen-*datatypes*)))
    (do
     (set shen-*alldatatypes* (adjoin (hd V1530) (value shen-*alldatatypes*)))
     (hd V1530))))
  (true (shen-sys-error shen-remember-datatype))))

(defun shen-rules->horn-clauses (V1533 V1534)
 (cond ((= () V1534) ())
  ((and (cons? V1534)
    (and (tuple? (hd V1534)) (= shen-single (fst (hd V1534)))))
   (cons (shen-rule->horn-clause V1533 (snd (hd V1534)))
    (shen-rules->horn-clauses V1533 (tl V1534))))
  ((and (cons? V1534)
    (and (tuple? (hd V1534)) (= shen-double (fst (hd V1534)))))
   (shen-rules->horn-clauses V1533
    (append (shen-double->singles (snd (hd V1534))) (tl V1534))))
  (true (shen-sys-error shen-rules->horn-clauses))))

(defun shen-double->singles (V1535)
 (cons (shen-right-rule V1535) (cons (shen-left-rule V1535) ())))

(defun shen-right-rule (V1536) (@p shen-single V1536))

(defun shen-left-rule (V1537)
 (cond
  ((and (cons? V1537)
    (and (cons? (tl V1537))
     (and (cons? (tl (tl V1537)))
      (and (tuple? (hd (tl (tl V1537))))
       (and (= () (fst (hd (tl (tl V1537)))))
        (= () (tl (tl (tl V1537)))))))))
   (let Q (gensym Qv)
    (let NewConclusion (@p (cons (snd (hd (tl (tl V1537)))) ()) Q)
     (let NewPremises
      (cons
       (@p (map (lambda V1538 (shen-right->left V1538)) (hd (tl V1537))) Q)
       ())
      (@p shen-single
       (cons (hd V1537) (cons NewPremises (cons NewConclusion ()))))))))
  (true (shen-sys-error shen-left-rule))))

(defun shen-right->left (V1543)
 (cond ((and (tuple? V1543) (= () (fst V1543))) (snd V1543))
  (true (interror "syntax error with ==========~%" ()))))

(defun shen-rule->horn-clause (V1544 V1545)
 (cond
  ((and (cons? V1545)
    (and (cons? (tl V1545))
     (and (cons? (tl (tl V1545)))
      (and (tuple? (hd (tl (tl V1545)))) (= () (tl (tl (tl V1545))))))))
   (cons (shen-rule->horn-clause-head V1544 (snd (hd (tl (tl V1545)))))
    (cons :-
     (cons
      (shen-rule->horn-clause-body (hd V1545) (hd (tl V1545))
       (fst (hd (tl (tl V1545)))))
      ()))))
  (true (shen-sys-error shen-rule->horn-clause))))

(defun shen-rule->horn-clause-head (V1546 V1547)
 (cons V1546 (cons (shen-mode-ify V1547) (cons Context ()))))

(defun shen-mode-ify (V1548)
 (cond
  ((and (cons? V1548)
    (and (cons? (tl V1548))
     (and (= : (hd (tl V1548)))
      (and (cons? (tl (tl V1548))) (= () (tl (tl (tl V1548))))))))
   (cons mode
    (cons
     (cons (hd V1548)
      (cons :
       (cons (cons mode (cons (hd (tl (tl V1548))) (cons + ()))) ())))
     (cons - ()))))
  (true V1548)))

(defun shen-rule->horn-clause-body (V1549 V1550 V1551)
 (let Variables (map (lambda V1552 (shen-extract_vars V1552)) V1551)
  (let Predicates (map (lambda X (gensym shen-cl)) V1551)
   (let SearchLiterals
    (shen-construct-search-literals Predicates Variables Context Context1)
    (let SearchClauses
     (shen-construct-search-clauses Predicates V1551 Variables)
     (let SideLiterals (shen-construct-side-literals V1549)
      (let PremissLiterals
       (map (lambda X (shen-construct-premiss-literal X (empty? V1551))) V1550)
       (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen-construct-search-literals (V1557 V1558 V1559 V1560)
 (cond ((and (= () V1557) (= () V1558)) ())
  (true (shen-csl-help V1557 V1558 V1559 V1560))))

(defun shen-csl-help (V1563 V1564 V1565 V1566)
 (cond
  ((and (= () V1563) (= () V1564))
   (cons (cons bind (cons ContextOut (cons V1565 ()))) ()))
  ((and (cons? V1563) (cons? V1564))
   (cons (cons (hd V1563) (cons V1565 (cons V1566 (hd V1564))))
    (shen-csl-help (tl V1563) (tl V1564) V1566 (gensym Context))))
  (true (shen-sys-error shen-csl-help))))

(defun shen-construct-search-clauses (V1567 V1568 V1569)
 (cond
  ((and (= () V1567) (and (= () V1568) (= () V1569))) shen-skip)
  ((and (cons? V1567) (and (cons? V1568) (cons? V1569)))
   (do (shen-construct-search-clause (hd V1567) (hd V1568) (hd V1569))
    (shen-construct-search-clauses (tl V1567) (tl V1568) (tl V1569))))
  (true (shen-sys-error shen-construct-search-clauses))))

(defun shen-construct-search-clause (V1570 V1571 V1572)
 (shen-s-prolog
  (cons (shen-construct-base-search-clause V1570 V1571 V1572)
   (cons (shen-construct-recursive-search-clause V1570 V1571 V1572) ()))))

(defun shen-construct-base-search-clause (V1573 V1574 V1575)
 (cons (cons V1573 (cons (cons (shen-mode-ify V1574) In) (cons In V1575)))
  (cons :- (cons () ()))))

(defun shen-construct-recursive-search-clause (V1576 V1577 V1578)
 (cons
  (cons V1576
   (cons (cons Assumption Assumptions) (cons (cons Assumption Out) V1578)))
  (cons :-
   (cons (cons (cons V1576 (cons Assumptions (cons Out V1578))) ()) ()))))

(defun shen-construct-side-literals (V1583)
 (cond ((= () V1583) ())
  ((and (cons? V1583)
    (and (cons? (hd V1583))
     (and (= if (hd (hd V1583)))
      (and (cons? (tl (hd V1583))) (= () (tl (tl (hd V1583))))))))
   (cons (cons when (tl (hd V1583)))
    (shen-construct-side-literals (tl V1583))))
  ((and (cons? V1583)
    (and (cons? (hd V1583))
     (and (= let (hd (hd V1583)))
      (and (cons? (tl (hd V1583)))
       (and (cons? (tl (tl (hd V1583))))
        (= () (tl (tl (tl (hd V1583))))))))))
   (cons (cons is (tl (hd V1583))) (shen-construct-side-literals (tl V1583))))
  ((cons? V1583) (shen-construct-side-literals (tl V1583)))
  (true (shen-sys-error shen-construct-side-literals))))

(defun shen-construct-premiss-literal (V1588 V1589)
 (cond
  ((tuple? V1588)
   (cons shen-t*
    (cons (shen-recursive_cons_form (snd V1588))
     (cons (shen-construct-context V1589 (fst V1588)) ()))))
  ((= ! V1588) (cons ! ()))
  (true (shen-sys-error shen-construct-premiss-literal))))

(defun shen-construct-context (V1590 V1591)
 (cond ((and (= true V1590) (= () V1591)) Context)
  ((and (= false V1590) (= () V1591)) ContextOut)
  ((cons? V1591)
   (cons cons
    (cons (shen-recursive_cons_form (hd V1591))
     (cons (shen-construct-context V1590 (tl V1591)) ()))))
  (true (shen-sys-error shen-construct-context))))

(defun shen-recursive_cons_form (V1592)
 (cond
  ((cons? V1592)
   (cons cons
    (cons (shen-recursive_cons_form (hd V1592))
     (cons (shen-recursive_cons_form (tl V1592)) ()))))
  (true V1592)))

(defun preclude (V1593)
 (let FilterDatatypes
  (set shen-*datatypes* (difference (value shen-*datatypes*) V1593))
  (value shen-*datatypes*)))

(defun include (V1594)
 (let ValidTypes (intersection V1594 (value shen-*alldatatypes*))
  (let NewDatatypes
   (set shen-*datatypes* (union ValidTypes (value shen-*datatypes*)))
   (value shen-*datatypes*))))

(defun preclude-all-but (V1595)
 (preclude (difference (value shen-*alldatatypes*) V1595)))

(defun include-all-but (V1596)
 (include (difference (value shen-*alldatatypes*) V1596)))

(defun shen-synonyms-help (V1601)
 (cond ((= () V1601) synonyms)
  ((and (cons? V1601) (cons? (tl V1601)))
   (do (shen-pushnew (cons (hd V1601) (hd (tl V1601))) shen-*synonyms*)
    (shen-synonyms-help (tl (tl V1601)))))
  (true (interror "odd number of synonyms~%" (@p () ())))))

(defun shen-pushnew (V1602 V1603)
 (if (element? V1602 (value V1603)) (value V1603)
  (set V1603 (cons V1602 (value V1603)))))

