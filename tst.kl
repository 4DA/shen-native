(load-kl "kl-src/toplevel.kl")
(load-kl "kl-src/core.kl")
(load-kl "kl-src/sys.kl")
(load-kl "kl-src/sequent.kl")
(load-kl "kl-src/yacc.kl")
(load-kl "kl-src/reader.kl")
(load-kl "kl-src/prolog.kl")
(load-kl "kl-src/track.kl") 
(load-kl "kl-src/load.kl") 
(load-kl "kl-src/writer.kl")
(load-kl "kl-src/macros.kl")
(load-kl "kl-src/declarations.kl")

(defun declare (V1651 V1652)
 (let Record (set shen-*signedfuncs* (adjoin V1651 (value shen-*signedfuncs*)))
  (let Variancy
   (trap-error (shen-variancy-test V1651 V1652) (lambda E shen-skip))
   (let Type (shen-rcons_form V1652)
    (let F* (concat shen-type-signature-of- V1651)
     (let Parameters (shen-parameters 1)
      (let Clause
       (cons (cons F* (cons X ()))
        (cons :- (cons (cons (cons unify! (cons X (cons Type ()))) ()) ())))
       (let AUM_instruction (shen-aum Clause Parameters)
        (let Code (shen-aum_to_shen AUM_instruction)
         (let ShenDef
          (cons define
           (cons F*
            (append Parameters
             (append (cons ProcessN (cons Continuation ()))
              (cons -> (cons Code ()))))))
          (let Eval (eval-without-macros ShenDef) V1651)))))))))))

(defun shen-variancy-test (V1653 V1654)
 (let TypeF (shen-typecheck V1653 B)
  (let Check
   (if (= symbol TypeF) shen-skip
    (if (shen-variant? TypeF V1654) shen-skip
     (intoutput "warning: changing the type of ~A may create errors~%"
      (@p V1653 ()))))
   shen-skip)))

(defun shen-variant? (V1663 V1664)
 (cond ((= V1664 V1663) true)
  ((and (cons? V1663) (and (cons? V1664) (= (hd V1664) (hd V1663))))
   (shen-variant? (tl V1663) (tl V1664)))
  ((and (cons? V1663)
    (and (cons? V1664) (and (shen-pvar? (hd V1663)) (variable? (hd V1664)))))
   (shen-variant? (subst shen-a (hd V1663) (tl V1663))
    (subst shen-a (hd V1664) (tl V1664))))
  ((and (cons? V1663)
    (and (cons? (hd V1663)) (and (cons? V1664) (cons? (hd V1664)))))
   (shen-variant? (append (hd V1663) (tl V1663))
    (append (hd V1664) (tl V1664))))
  (true false)))

